<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>古时的风筝</title><link>https://www.moonkite.cn/</link><description>Recent content on 古时的风筝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 02 Jun 2023 08:56:23 +0800</lastBuildDate><atom:link href="https://www.moonkite.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>VsCode ChatGPT 插件，一个代码助手</title><link>https://www.moonkite.cn/category/product/VsCode-ChatGPT-%E6%8F%92%E4%BB%B6%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%8A%A9%E6%89%8B/</link><pubDate>Fri, 02 Jun 2023 08:56:23 +0800</pubDate><guid>https://www.moonkite.cn/category/product/VsCode-ChatGPT-%E6%8F%92%E4%BB%B6%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%8A%A9%E6%89%8B/</guid><description>安装地址：mini ChatGPT 其实很早之前就想学学 VSCode 插件开发了，但是又不知道做什么，加上我这半吊子前端水平，迟迟没有动手。 最近 ChatGPT 火的一塌糊涂，我也一直</description><content:encoded><![CDATA[<p><strong>安装地址</strong>：<a href="https://marketplace.visualstudio.com/items?itemName=fengzheng.code-chatgpt-assistant"><strong>mini ChatGPT</strong></a></p>
<p>其实很早之前就想学学 VSCode 插件开发了，但是又不知道做什么，加上我这半吊子前端水平，迟迟没有动手。</p>
<p>最近 ChatGPT 火的一塌糊涂，我也一直在用，真的非常好用，有些问题之前需要 Google 搜索，现在用 ChatGPT 基本上都能直接解决，效率提升了不少。</p>
<p>但是吧，浏览器和 IDE 来回切换又很麻烦，所以我灵机一动，那就开发个 ChatGPT 插件吧，即可以学习学习 VSCode 插件开发，又可以做一个方便的效率工具，岂不是一举两得，美哉美哉。</p>
<p>于是我就动手写了下面这个插件，叫做 <code>mini ChatGPT</code>，现在已经发布到 VSCode 插件市场了。</p>
<p>有条件的同学可以安装一下，试试效果如何。</p>
<p><strong>插件功能特点</strong></p>
<ul>
<li>界面简洁，没有多余的干扰；</li>
<li>像 ChatGPT 官网输出效果一致，打字效果实时输出；</li>
<li>支持两轮上下文（太多了浪费 tokens），大致等于支持上下文；</li>
<li>代码美化+格式化，并且可以一键复制，直接粘贴到 vscode 中；</li>
</ul>
<p><img src="https://hexo.moonkite.cn/blog/image-20230509181750193.png" alt=""></p>
<h2 id="插件安装">插件安装</h2>
<p><strong>当然了，这是需要科学上网的。</strong></p>
<p>你可以直接在 VSCode 的商店直接搜索 <code>mini ChatGPT</code>安装。</p>
<p><img src="https://hexo.moonkite.cn/blog/image-20230509183628014.png" alt=""></p>
<p>也可以到应用市场上安装。</p>
<p><img src="https://hexo.moonkite.cn/blog/image-20230509183750997.png" alt=""></p>
<p>插件地址：https://marketplace.visualstudio.com/items?itemName=fengzheng.code-chatgpt-assistant</p>
<h2 id="插件使用">插件使用</h2>
<ol>
<li>点击查看-&gt;命令面板，或者使用快捷键（MacOS: Shift + Command + P，Windows:Shift + Control + P</li>
<li>输入 <code>Chat</code> 并回车。
<img src="https://hexo.moonkite.cn/blog/20230509111926.png" alt=""></li>
<li>如果是首次使用，会弹出提示输入框，在此输入 ChatGPT 的 API。使用的就是原滋原味的 ChatGPT API 接口，官网上都写的很清楚，所以需要使用插件的小伙伴提供自己账号的 API key。下面有介绍如何获取ChatGPT API key。
<img src="https://hexo.moonkite.cn/blog/20230509112123.png" alt=""></li>
<li>之后就可以使用啦
<img src="https://hexo.moonkite.cn/blog/20230509112311.png" alt=""></li>
<li>如果之后想更换 ChatGPT 的 API key，在命令面板中输入 <code>ChatGPT API</code> 即可。</li>
</ol>
<p><strong>使用建议</strong></p>
<p>此插件只有一个 webview 实现，打开之后独占一个 tab，可以设置向左或向右拆分，然后在左侧使用此插件向 ChatGPT 提问，右侧是代码文件，这样就不用来回切换了，而且可以将代码片段一键复制，然后直接运行。</p>
<p><img src="https://hexo.moonkite.cn/blog/chatgpt.gif" alt=""></p>
<p><strong>获取 ChatGPT API key</strong></p>
<ol>
<li>
<p>先准备好科学上网，不要用亚洲节点。</p>
</li>
<li>
<p>之后到 <a href="https://platform.openai.com/">OpenAI 官网</a>注册账号。</p>
</li>
<li>
<p>到<a href="https://platform.openai.com/account/api-keys">个人中心</a> 创建一个 API key。</p>
</li>
</ol>
<p><img src="https://hexo.moonkite.cn/blog/20230509133206.png" alt=""></p>
<h2 id="开发历程">开发历程</h2>
<p>作为一个后端开发，我的前端水平是非常一般的，所以代码中有瑕疵的地方还请见谅。对了，代码已经放到 GitHub  上了。</p>
<p>仓库地址：https://github.com/huzhicheng/vscode-ChatGPT</p>
<p>VSCode 插件开发，官方建议是用 TypeScript 开发，所以项目完全采用了 TS 开发。由于功能比较简单，没有那么多复杂的设置，由于边学边做，太复杂的也没考虑。整个插件的核心其实就是一个 <code>webview</code>，在webview中实现界面布局和样式，难点就在于webview与插件本身来回的数据传递，但也都是常规用法。</p>
<p>整个写代码的过程其实也就几个小时，当然过程中的遇到的一些问题我都是跟 ChatGPT 提问的，包括样式都是直接描述需求，ChatGPT 给我一个大致的框架，我再微调一下就可以了。</p>
<p>所以这样看下来，其实是我和 ChatGPT 合作开发的。</p>
<p>后来发布到应用商店，写 readme 介绍和使用说明花了一些时间。</p>
<h2 id="问题和建议">问题和建议</h2>
<p>目前的版本功能比较简单，没有 ChatGPT 官方的聊天记录列表功能，如果真的有人用的话，后期考虑加上。</p>
<p>由于ChatGPT 官方并未提供上下文的 API 支持，所以只能采用其他方式模仿上下文能力，目前的做法是记录前两轮提问和回答，然后在下次提问的时候，将前两轮的提问和回答告诉 ChatGPT ，并且明确告诉 ChatGPT，例如下面这样。</p>
<p>第一轮问题：你好。</p>
<p>第一轮回答：你好，请问有什么要帮忙的吗？</p>
<p>第二论问题：请帮我写一段 Python 爬虫抓取知乎回答的 demo。</p>
<p>第二轮回答：好的，下面是一段抓取知乎回答的 Python 示例。&hellip;.省略多行代码。</p>
<p>第三轮问题：帮我改成 Java 的。</p>
<p>这时候，我会将实际的 prompt 改成下面这样的。</p>
<blockquote>
<p>下面中括号部分是前两轮的问题和回答，只用作参考。[my question is:&ldquo;你好&rdquo;,your anwser is:&ldquo;你好，请问有什么要帮忙的吗？&quot;.my question is:&ldquo;请帮我写一段 Python 爬虫抓取知乎回答的 demo。&quot;,your anwser is:&ldquo;好的，下面是一段抓取知乎回答的 Python 示例。&hellip;.省略多行代码。&rdquo;.]</p>
<p>下面引号包含的这部分是真正的问题：&ldquo;帮我改成 Java 的。&rdquo;</p>
</blockquote>
<p>采用这种方式，几乎可以模拟上下文的操作，但是偶尔会出现错乱，这块儿还有优化空间，还会继续优化。</p>
<p>如果各位小伙伴使用过程中发现什么问题，或者有什么更好的建议，都可以加我好友直接跟我说。</p>
<p>欢迎捧场，赶紧用一用吧，觉得好用的话，可以推荐给身边的小伙伴也用一下。</p>
<p><img src="https://hexo.moonkite.cn/blog/877shots_so%20(1).png" alt=""></p>
]]></content:encoded></item><item><title>做了一个 VSCode ChatGPT 插件</title><link>https://www.moonkite.cn/2023/05/24/%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA-VSCode-ChatGPT-%E6%8F%92%E4%BB%B6/</link><pubDate>Wed, 24 May 2023 12:56:23 +0800</pubDate><guid>https://www.moonkite.cn/2023/05/24/%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA-VSCode-ChatGPT-%E6%8F%92%E4%BB%B6/</guid><description>其实很早之前就想学学 VSCode 插件开发了，但是又不知道做什么，加上我这半吊子前端水平，迟迟没有动手。 最近 ChatGPT 火的一塌糊涂，我也一直在用，真的非常好用，</description><content:encoded><![CDATA[<p>其实很早之前就想学学 VSCode 插件开发了，但是又不知道做什么，加上我这半吊子前端水平，迟迟没有动手。</p>
<p>最近 ChatGPT 火的一塌糊涂，我也一直在用，真的非常好用，有些问题之前需要 Google 搜索，现在用 ChatGPT 基本上都能直接解决，效率提升了不少。</p>
<p>但是吧，浏览器和 IDE 来回切换又很麻烦，所以我灵机一动，那就开发个 ChatGPT 插件吧，即可以学习学习 VSCode 插件开发，又可以做一个方便的效率工具，岂不是一举两得，美哉美哉。</p>
<p>于是我就动手写了下面这个插件，叫做 <code>mini ChatGPT</code>，现在已经发布到 VSCode 插件市场了。</p>
<p>有条件的同学可以安装一下，试试效果如何。</p>
<p><strong>插件功能特点</strong></p>
<ul>
<li>界面简洁，没有多余的干扰；</li>
<li>像 ChatGPT 官网输出效果一致，打字效果实时输出；</li>
<li>支持两轮上下文（太多了浪费 tokens），大致等于支持上下文；</li>
<li>代码美化+格式化，并且可以一键复制，直接粘贴到 vscode 中；</li>
</ul>
<p><img src="https://hexo.moonkite.cn/blog/image-20230509181750193.png" alt=""></p>
<h2 id="插件安装">插件安装</h2>
<p><strong>当然了，这是需要科学上网的。</strong></p>
<p>你可以直接在 VSCode 的商店直接搜索 <code>mini ChatGPT</code>安装。</p>
<p><img src="https://hexo.moonkite.cn/blog/image-20230509183628014.png" alt=""></p>
<p>也可以到应用市场上安装。</p>
<p><img src="https://hexo.moonkite.cn/blog/image-20230509183750997.png" alt=""></p>
<p>插件地址：https://marketplace.visualstudio.com/items?itemName=fengzheng.code-chatgpt-assistant</p>
<h2 id="插件使用">插件使用</h2>
<ol>
<li>点击查看-&gt;命令面板，或者使用快捷键（MacOS: Shift + Command + P，Windows:Shift + Control + P</li>
<li>输入 <code>Chat</code> 并回车。
<img src="https://hexo.moonkite.cn/blog/20230509111926.png" alt=""></li>
<li>如果是首次使用，会弹出提示输入框，在此输入 ChatGPT 的 API。使用的就是原滋原味的 ChatGPT API 接口，官网上都写的很清楚，所以需要使用插件的小伙伴提供自己账号的 API key。下面有介绍如何获取ChatGPT API key。
<img src="https://hexo.moonkite.cn/blog/20230509112123.png" alt=""></li>
<li>之后就可以使用啦
<img src="https://hexo.moonkite.cn/blog/20230509112311.png" alt=""></li>
<li>如果之后想更换 ChatGPT 的 API key，在命令面板中输入 <code>ChatGPT API</code> 即可。</li>
</ol>
<p><strong>使用建议</strong></p>
<p>此插件只有一个 webview 实现，打开之后独占一个 tab，可以设置向左或向右拆分，然后在左侧使用此插件向 ChatGPT 提问，右侧是代码文件，这样就不用来回切换了，而且可以将代码片段一键复制，然后直接运行。</p>
<p><img src="https://hexo.moonkite.cn/blog/chatgpt.gif" alt=""></p>
<p><strong>获取 ChatGPT API key</strong></p>
<ol>
<li>
<p>先准备好科学上网，不要用亚洲节点。</p>
</li>
<li>
<p>之后到 <a href="https://platform.openai.com/">OpenAI 官网</a>注册账号。</p>
</li>
<li>
<p>到<a href="https://platform.openai.com/account/api-keys">个人中心</a> 创建一个 API key。</p>
</li>
</ol>
<p><img src="https://hexo.moonkite.cn/blog/20230509133206.png" alt=""></p>
<h2 id="开发历程">开发历程</h2>
<p>作为一个后端开发，我的前端水平是非常一般的，所以代码中有瑕疵的地方还请见谅。对了，代码已经放到 GitHub  上了。</p>
<p>仓库地址：https://github.com/huzhicheng/vscode-ChatGPT</p>
<p>VSCode 插件开发，官方建议是用 TypeScript 开发，所以项目完全采用了 TS 开发。由于功能比较简单，没有那么多复杂的设置，由于边学边做，太复杂的也没考虑。整个插件的核心其实就是一个 <code>webview</code>，在webview中实现界面布局和样式，难点就在于webview与插件本身来回的数据传递，但也都是常规用法。</p>
<p>整个写代码的过程其实也就几个小时，当然过程中的遇到的一些问题我都是跟 ChatGPT 提问的，包括样式都是直接描述需求，ChatGPT 给我一个大致的框架，我再微调一下就可以了。</p>
<p>所以这样看下来，其实是我和 ChatGPT 合作开发的。</p>
<p>后来发布到应用商店，写 readme 介绍和使用说明花了一些时间。</p>
<h2 id="问题和建议">问题和建议</h2>
<p>目前的版本功能比较简单，没有 ChatGPT 官方的聊天记录列表功能，如果真的有人用的话，后期考虑加上。</p>
<p>由于ChatGPT 官方并未提供上下文的 API 支持，所以只能采用其他方式模仿上下文能力，目前的做法是记录前两轮提问和回答，然后在下次提问的时候，将前两轮的提问和回答告诉 ChatGPT ，并且明确告诉 ChatGPT，例如下面这样。</p>
<p>第一轮问题：你好。</p>
<p>第一轮回答：你好，请问有什么要帮忙的吗？</p>
<p>第二论问题：请帮我写一段 Python 爬虫抓取知乎回答的 demo。</p>
<p>第二轮回答：好的，下面是一段抓取知乎回答的 Python 示例。&hellip;.省略多行代码。</p>
<p>第三轮问题：帮我改成 Java 的。</p>
<p>这时候，我会将实际的 prompt 改成下面这样的。</p>
<blockquote>
<p>下面中括号部分是前两轮的问题和回答，只用作参考。[my question is:&ldquo;你好&rdquo;,your anwser is:&ldquo;你好，请问有什么要帮忙的吗？&quot;.my question is:&ldquo;请帮我写一段 Python 爬虫抓取知乎回答的 demo。&quot;,your anwser is:&ldquo;好的，下面是一段抓取知乎回答的 Python 示例。&hellip;.省略多行代码。&rdquo;.]</p>
<p>下面引号包含的这部分是真正的问题：&ldquo;帮我改成 Java 的。&rdquo;</p>
</blockquote>
<p>采用这种方式，几乎可以模拟上下文的操作，但是偶尔会出现错乱，这块儿还有优化空间，还会继续优化。</p>
<p>如果各位小伙伴使用过程中发现什么问题，或者有什么更好的建议，都可以加我好友直接跟我说。</p>
<p>欢迎捧场，赶紧用一用吧，觉得好用的话，可以推荐给身边的小伙伴也用一下。</p>
<p><img src="https://hexo.moonkite.cn/blog/877shots_so%20(1).png" alt=""></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">kite.lab.spring.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Hacker
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @author fengzheng
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hacker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">language</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isHide</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="n">String</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLanguage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">language</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLanguage</span><span class="o">(</span><span class="n">String</span> <span class="n">language</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">language</span> <span class="o">=</span> <span class="n">language</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isHide</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">isHide</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHide</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">hide</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">isHide</span> <span class="o">=</span> <span class="n">hide</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;======================\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;hacker&#39;s name is :%s \n&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getName</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;hacker&#39;s age is :%s \n&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getAge</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;hacker&#39;s language is :%s \n&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getLanguage</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;hacker&#39;s status is :%s \n&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">isHide</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;======================\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded></item></channel></rss>